# UltimateSensor Complete Configuration
# This configuration includes settings for all sensors, including the Particulate Matter (PM) sensor.
# Use this file if your device includes the PM/fine dust measurement capability.

# Name of device
substitutions:
  device_name: ultimatesensor-mini
  friendly_name: "UltimateSensor Mini"
  ultimatesensor_mini_hardware_version: "V1-Complete"
  wifi_fast_connect: "true"
  update_manifest_url: "https://smarthomeshop.github.io/ultimatesensor-mini/ultimatesensor-mini-complete-manifest.json"
  project_main_version: "2"
  project_version: "2.8"
  log_level: "INFO"
  
# Esphome start
esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  project:
    name: "smarthomeshop.ultimatesensor_mini"
    version: ${project_version}
    on_update:
      then:
        - logger.log: "UltimateSensor Mini firmware updated successfully!"
        - light.turn_on:
            id: rgb_front_light
            brightness: 100%
            red: 0%
            green: 100%
            blue: 0%
            flash_length: 500ms
  on_boot:
    then:
      - wait_until: 
          condition:
            wifi.connected
          timeout: 30s
      - script.execute: play_stream
      # Disable Bluetooth after WiFi is connected to save memory
      - ble.disable:

# External components (removed LD2450)
esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  partitions: "default_16MB.csv"
  framework:
    type: arduino

psram:
  mode: octal
  speed: 80Mhz

# Bluetooth for provisioning (will be disabled after WiFi connects)
esp32_ble:
  id: ble_id

# Enable improv over BLE for initial WiFi provisioning
esp32_improv:
  authorizer: none

# Enable improv over serial for USB provisioning
improv_serial:

# Start up script
script:
  - id: play_stream
    then:
      - media_player.volume_set:  
          id: speaker
          volume: 50%
      # Play boot sound
      - media_player.play_media:
          id: speaker
          media_url: "https://smarthomeshop.io/products/ultimatesensor-mini/v1/audio/boot1.mp3"
      # Wait 3 seconds to load media
      - delay: 3s
      # Turn front and back light on white
      - light.turn_on:
          id: rgb_front_light
          brightness: 80%
          red: 100%
          green: 100%
          blue: 100%
      - light.turn_on:
          id: rgb_back_light
          brightness: 80%
          red: 100%
          green: 100%
          blue: 100%
      # Wait 6 seconds to play boot sound
      - delay: 6s
      # Turn off front and back light
      - light.turn_off:
          id: rgb_front_light
      - light.turn_off:
          id: rgb_back_light

# Enable logging for debugging
logger:
  level: DEBUG  # Enable debug logging to see I2C issues
  hardware_uart: UART0

# Enable Home Assistant API
api:

#Enable Over the Air updates
ota:
  - platform: esphome
    id: ota_esphome
  - platform: http_request
    id: ota_http_request

http_request:
  useragent: ultimatesensor-mini-esphome
  verify_ssl: false

update:
  - platform: http_request
    name: UltimateSensor Mini Firmware
    source: ${update_manifest_url}
    disabled_by_default: true

wifi:
  # remove leading '#' and fill in your wifi details
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: ${wifi_fast_connect}

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: ${device_name}

# Fallback hotspot
captive_portal:  
  
# Enable web server so you can view data in browser if you go to ip of the device
# web_server:
#   port: 80

# Speaker part
i2s_audio:
  - id: i2s_speaker
    i2s_lrclk_pin: GPIO8
    i2s_bclk_pin: GPIO18
  - id: i2s_microphone
    i2s_lrclk_pin: GPIO7
    i2s_bclk_pin: GPIO16

media_player:
  - platform: i2s_audio
    id: speaker
    name: US Mini Media Player
    dac_type: external
    i2s_dout_pin: GPIO17
    i2s_audio_id: i2s_speaker
    mode: mono

#Microphone part
microphone:
  - platform: i2s_audio
    id: mic
    i2s_audio_id: i2s_microphone
    adc_type: external
    i2s_din_pin: GPIO15
    pdm: false
    channel: right
    #bits_per_sample: 32bit
    #sample_rate: 40000

#Voice Assistant part
voice_assistant:
  id: va
  microphone: mic
  #noise_suppression_level: 2
  auto_gain: 31dBFS
  #volume_multiplier: 4.0
  use_wake_word: false
  media_player: speaker
  on_error: 
   - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - switch.turn_off: use_wake_word
          - switch.turn_on: use_wake_word      

  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:

  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
  
  on_wake_word_detected:
    then:
        # Turn front light on RED
      - light.turn_on:
          id: rgb_front_light
          brightness: 100%
          red: 100%
          green: 0%
          blue: 0%
    
  on_stt_vad_start:
    then:
      - light.turn_off:
          id: rgb_front_light

# Enable I2C with debugging
i2c:
  - id: bus_a
    sda: GPIO11
    scl: GPIO10
    scan: true
    frequency: 100kHz  # Lower frequency for stability

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO20
    num_leds: 1
    rgb_order: GRB
    name: "Back light"
    id: rgb_back_light

  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO5
    num_leds: 1
    rgb_order: GRB
    name: "Front light"
    id: rgb_front_light

# Status LED of ESP
status_led:
  pin: GPIO19

sensor:
  - platform: sps30
    id: sps30_sensor
    pm_1_0:
      id: "PM_1_0"
      name: "PM <1µm Weight concentration"
    pm_2_5:
      id: "PM_2_5"
      name: "PM <2.5µm Weight concentration"
    pm_4_0:
      id: "PM_4_0"
      name: "PM <4µm Weight concentration"
    pm_10_0:
      id: "PM_10_0"
      name: "PM <10µm Weight concentration"
    pmc_0_5:
      id: "PMC_0_5"
      name: "PM <0.5µm Number concentration"
    pmc_1_0:
      id: "PMC_1_0"
      name: "PM <1µm Number concentration"
    pmc_2_5:
      id: "PMC_2_5"
      name: "PM <2.5µm Number concentration"
    pmc_4_0:
      id: "PMC_4_0"
      name: "PM <4µm Number concentration"
    pmc_10_0:
      id: "PMC_10_0"
      name: "PM <10µm Number concentration"
    pm_size:
      id: "pm_size"
      name: "Typical Particle size"
    address: 0x69
    update_interval: 60s
    idle_interval: 5min  # Nieuwe functionaliteit uit PR #6828 - sensor gaat in idle mode tussen metingen
  # SCD41
  - platform: scd4x
    id: my_scd41
    co2:
      id: scd41_co2
      name: "SCD41 CO2"
    temperature:
      id: scd41_temperature
      name: "SCD41 Temperature"
    humidity:
      id: scd41_humidity
      name: "SCD41 Humidity"
      filters:
        offset: 3
    measurement_mode: low_power_periodic
    update_interval: 30s
    temperature_offset: 2.3

  # BH1750
  - platform: bh1750
    id: illuminance
    name: "BH1750 Illuminance"
    address: 0x23
    update_interval: 60s

  # SGP41
  - platform: sgp4x
    id: sgp41
    voc:
      id: voc_index
      name: "VOC Index"
    nox:
      id: nox_index
      name: "NOx Index"
    compensation:
      humidity_source: scd41_humidity
      temperature_source: scd41_temperature

  # System monitoring sensors
  - platform: wifi_signal
    id: wifi_signal_sensor
    name: "WiFi Signal"
    update_interval: 60s
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    
  - platform: internal_temperature
    id: cpu_temperature
    name: "CPU Temperature"
    unit_of_measurement: "°C"
    entity_category: "diagnostic"

  # LD2450 mmWave sensors (old template method)
  - platform: template
    name: "Target 1 X"
    id: target1_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 1 Y"
    id: target1_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 1 Speed"
    id: target1_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
  - platform: template
    name: "Target 1 Resolution"
    id: target1_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 2 X"
    id: target2_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 2 Y"
    id: target2_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 2 Speed"
    id: target2_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
  - platform: template
    name: "Target 2 Resolution"
    id: target2_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 3 X"
    id: target3_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 3 Y"
    id: target3_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 3 Speed"
    id: target3_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
  - platform: template
    name: "Target 3 Resolution"
    id: target3_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 1 Angle"
    id: target1_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "Target 2 Angle"
    id: target2_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "Target 3 Angle"
    id: target3_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "Target 1 Distance"
    id: target1_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 2 Distance"
    id: target2_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Target 3 Distance"
    id: target3_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "Zone 1 Target Count"
    id: zone1_target_count
    accuracy_decimals: 0
  - platform: template
    name: "Zone 2 Target Count"
    id: zone2_target_count
    accuracy_decimals: 0
  - platform: template
    name: "Zone 3 Target Count"
    id: zone3_target_count
    accuracy_decimals: 0
  - platform: template
    name: "Zone 4 Target Count"
    id: zone4_target_count
    accuracy_decimals: 0
    disabled_by_default: true

globals:
  - id: mmwave_update_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

uart:
  id: uart_bus
  tx_pin: 
    number: GPIO13
    mode:
      input: true
      pullup: true
  rx_pin: 
    number: GPIO14
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8
  debug:
    direction: BOTH
    dummy_receiver: True
    after:
     delimiter: [0X55, 0XCC]
    sequence:
      # - lambda: UARTDebug::log_hex(direction, bytes, ' ');
      - lambda: |-
          if ((millis() - id(mmwave_update_time)) <= 1000) { 
            return;
          };
          id(mmwave_update_time) = millis();

          int16_t p1_x = (uint16_t((bytes[5] << 8) | bytes[4] ));
          if ((bytes[5] & 0x80) >> 7){
            p1_x -= pow(2, 15); 
          }else{
            p1_x = 0 - p1_x; // was 0 - p1_x;
          }
          p1_x = -p1_x;

          int16_t p1_y = (uint16_t((bytes[7] << 8) | bytes[6] ));
          if ((bytes[7] & 0x80) >> 7){
            p1_y -= pow(2, 15);
          }else{
            p1_y = 0 - p1_y;
          }

          float p1_speed = (bytes[9] << 8 | bytes[8] );
          if ((bytes[9] & 0x80) >> 7){
            p1_speed -= pow(2, 15);
          }else{
            p1_speed = 0 - p1_speed;
          }
          int16_t p1_distance_resolution = (uint16_t((bytes[11] << 8) | bytes[10] )); 

          int16_t p2_x = (uint16_t((bytes[13] << 8) | bytes[12] ));
          if ((bytes[13] & 0x80) >> 7){
            p2_x -=  pow(2, 15); 
          }else{
            p2_x = 0 - p2_x;
          }

          int16_t p2_y = (uint16_t((bytes[15] << 8) | bytes[14] ));
          if ((bytes[15] & 0x80) >> 7){
            p2_y -= pow(2, 15);
          }else{
            p2_y = 0 - p2_y;
          }

          float p2_speed = (bytes[17] << 8 | bytes[16] );
          if ((bytes[17] & 0x80) >> 7){
            p2_speed -= pow(2, 15);
          }else{
            p2_speed = 0 - p2_speed;
          }
          int16_t p2_distance_resolution = (uint16_t((bytes[19] << 8) | bytes[18] )); 

          int16_t p3_x = (uint16_t((bytes[21] << 8) | bytes[20] ));
          if ((bytes[21] & 0x80) >> 7){
            p3_x -=  pow(2, 15); 
          }else{
            p3_x = 0 - p3_x;
          }

          int16_t p3_y = (uint16_t((bytes[23] << 8) | bytes[22] ));
          if ((bytes[23] & 0x80) >> 7){
            p3_y -= pow(2, 15);
          }else{
            p3_y = 0 - p3_y;
          }

          float p3_speed = (bytes[25] << 8 | bytes[24] );
          if ((bytes[25] & 0x80) >> 7){
            p3_speed -= pow(2, 15);
          }else{
            p3_speed = 0 - p3_speed;
          }
          int16_t p3_distance_resolution = (uint16_t((bytes[27] << 8) | bytes[26] ));

          const float RADIANS_TO_DEGREES = 180.0 / 3.14159265358979323846;
          float p1_angle = atan2(p1_y, p1_x) * RADIANS_TO_DEGREES;
          float p2_angle = atan2(p2_y, p2_x) * RADIANS_TO_DEGREES;
          float p3_angle = atan2(p3_y, p3_x) * RADIANS_TO_DEGREES;
          
          float p1_distance = sqrt(p1_x * p1_x + p1_y * p1_y);
          float p2_distance = sqrt(p2_x * p2_x + p2_y * p2_y);
          float p3_distance = sqrt(p3_x * p3_x + p3_y * p3_y);
          

          float max_distance = float(id(maxx_distance).state) * 10;
          if (p1_distance < max_distance) {
            id(target1_x).publish_state(p1_x * -1);
            id(target1_y).publish_state(p1_y);
            id(target1_speed).publish_state(p1_speed / 100);
            id(target1_resolution).publish_state(p1_distance_resolution);
            id(target1_distance).publish_state(p1_distance);
            id(target1_angle).publish_state(p1_angle - 90);
          } else {
            id(target1_x).publish_state(0);
            id(target1_y).publish_state(0);
            id(target1_speed).publish_state(0);
            id(target1_resolution).publish_state(0);
            id(target1_distance).publish_state(0);
            id(target1_angle).publish_state(0);
          }

          if (p2_distance < max_distance) {
            id(target2_x).publish_state(p2_x);
            id(target2_y).publish_state(p2_y);
            id(target2_speed).publish_state(p2_speed / 100);
            id(target2_resolution).publish_state(p2_distance_resolution);
            id(target2_distance).publish_state(p2_distance);
            id(target2_angle).publish_state(p2_angle);
          } else {
            id(target2_x).publish_state(0);
            id(target2_y).publish_state(0);
            id(target2_speed).publish_state(0);
            id(target2_resolution).publish_state(0);
            id(target2_distance).publish_state(0);
            id(target2_angle).publish_state(0);
          }

          if (p3_distance < max_distance) {
            id(target3_x).publish_state(p3_x);
            id(target3_y).publish_state(p3_y);
            id(target3_speed).publish_state(p3_speed / 100);
            id(target3_resolution).publish_state(p3_distance_resolution);
            id(target3_distance).publish_state(p3_distance);
            id(target3_angle).publish_state(p3_angle);
          } else {
            id(target3_x).publish_state(0);
            id(target3_y).publish_state(0);
            id(target3_speed).publish_state(0);
            id(target3_resolution).publish_state(0);
            id(target3_distance).publish_state(0);
            id(target3_angle).publish_state(0);
          }

          int zone1_count = 0;      
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone1_begin_x).state && id(target1_x).state <= id(zone1_end_x).state) &&
                  (id(target1_y).state >= id(zone1_begin_y).state && id(target1_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone1_begin_x).state && id(target2_x).state <= id(zone1_end_x).state) &&
                  (id(target2_y).state >= id(zone1_begin_y).state && id(target2_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone1_begin_x).state && id(target3_x).state <= id(zone1_end_x).state) &&
                  (id(target3_y).state >= id(zone1_begin_y).state && id(target3_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (zone1_count > 0) {
              id(zone1_occupancy).publish_state(true);
              id(zone1_target_count).publish_state(zone1_count);
          } else {
              id(zone1_occupancy).publish_state(false);
              id(zone1_target_count).publish_state(0);
          }

          int zone2_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone2_begin_x).state && id(target1_x).state <= id(zone2_end_x).state) &&
                  (id(target1_y).state >= id(zone2_begin_y).state && id(target1_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone2_begin_x).state && id(target2_x).state <= id(zone2_end_x).state) &&
                  (id(target2_y).state >= id(zone2_begin_y).state && id(target2_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone2_begin_x).state && id(target3_x).state <= id(zone2_end_x).state) &&
                  (id(target3_y).state >= id(zone2_begin_y).state && id(target3_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (zone2_count > 0) {
              id(zone2_occupancy).publish_state(true);
              id(zone2_target_count).publish_state(zone2_count);
          } else {
              id(zone2_occupancy).publish_state(false);
              id(zone2_target_count).publish_state(0);
          }

          int zone3_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone3_begin_x).state && id(target1_x).state <= id(zone3_end_x).state) &&
                  (id(target1_y).state >= id(zone3_begin_y).state && id(target1_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone3_begin_x).state && id(target2_x).state <= id(zone3_end_x).state) &&
                  (id(target2_y).state >= id(zone3_begin_y).state && id(target2_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone3_begin_x).state && id(target3_x).state <= id(zone3_end_x).state) &&
                  (id(target3_y).state >= id(zone3_begin_y).state && id(target3_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (zone3_count > 0) {
              id(zone3_occupancy).publish_state(true);
              id(zone3_target_count).publish_state(zone3_count);
          } else {
              id(zone3_occupancy).publish_state(false);
              id(zone3_target_count).publish_state(0);
          }

          int zone4_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone4_begin_x).state && id(target1_x).state <= id(zone4_end_x).state) &&
                  (id(target1_y).state >= id(zone4_begin_y).state && id(target1_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone4_begin_x).state && id(target2_x).state <= id(zone4_end_x).state) &&
                  (id(target2_y).state >= id(zone4_begin_y).state && id(target2_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone4_begin_x).state && id(target3_x).state <= id(zone4_end_x).state) &&
                  (id(target3_y).state >= id(zone4_begin_y).state && id(target3_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (zone4_count > 0) {
              id(zone4_occupancy).publish_state(true);
              id(zone4_target_count).publish_state(zone4_count);
          } else {
              id(zone4_occupancy).publish_state(false);
              id(zone4_target_count).publish_state(0);
          }

# Enable wake word switch
switch:
  - platform: template
    id: use_wake_word
    name: Use wake word
    optimistic: true
    # restore_mode: RESTORE_DEFAULT_ON
    restore_mode: ALWAYS_OFF
    entity_category: config
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
  # LD2450 Bluetooth control switch (based on ESPHome LD2410 component)
  # - platform: template
  #   id: ld2450_bluetooth
  #   name: "LD2450 Bluetooth"
  #   entity_category: "config"
  #   optimistic: true
  #   turn_on_action:
  #     - uart.write:
  #         id: uart_bus
  #         data: [0xFD, 0xFC, 0xFB, 0xFA, 0x04, 0x00, 0xA4, 0x00, 0x01, 0x00, 0x04, 0x03, 0x02, 0x01]
  #     - logger.log: "LD2450 Bluetooth turned ON"
  #     - delay: 200ms
  #   turn_off_action:
  #     - uart.write:
  #         id: uart_bus
  #         data: [0xFD, 0xFC, 0xFB, 0xFA, 0x04, 0x00, 0xA4, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01]
  #     - logger.log: "LD2450 Bluetooth turned OFF" 
  #     - delay: 200ms

  # (removed) restart switch – replaced by restart button below

button:
  - platform: template
    name: "SPS30 Start Measurement"
    on_press:
      - sps30.start_measurement: sps30_sensor
  
  - platform: template
    name: "SPS30 Stop Measurement (Idle Mode)"
    on_press:
      - sps30.stop_measurement: sps30_sensor

  - platform: restart
    id: btn_restart
    name: "Restart"
  - platform: template
    id: co2_calibration_button
    name: "CO2 manual calibration (only in fresh air for at least 10min)"
    entity_category: "config"
    on_press:
      then:
        - scd4x.perform_forced_calibration:
            value: 420
            id: my_scd41

  # # LD2450 factory reset button (based on ESPHome LD2410 component)
  # - platform: template
  #   id: ld2450_factory_reset
  #   name: "LD2450 Factory Reset"
  #   entity_category: "config"
  #   disabled_by_default: true
  #   on_press:
  #     then:
  #       # Enable configuration mode first
  #       - uart.write:
  #           id: uart_bus
  #           data: [0xFD, 0xFC, 0xFB, 0xFA, 0x04, 0x00, 0xFF, 0x00, 0x01, 0x00, 0x04, 0x03, 0x02, 0x01]
  #       - delay: 50ms
  #       # Send factory reset command
  #       - uart.write:
  #           id: uart_bus
  #           data: [0xFD, 0xFC, 0xFB, 0xFA, 0x02, 0x00, 0xA2, 0x00, 0x04, 0x03, 0x02, 0x01]
  #       - delay: 200ms
  #       - logger.log: "LD2450 Factory Reset executed"
            
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory Reset"
    entity_category: "config"
    disabled_by_default: true

binary_sensor:
  # Start wake word on HA connection
  - platform: status
    id: api_connection
    name: API Connection
    filters:
      - delayed_on: 1s
    on_press:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - voice_assistant.start_continuous:
    on_release:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - voice_assistant.stop:
  #MMWave
  - platform: template
    name: "Occupancy"
    device_class: occupancy
    filters:
      - delayed_off: !lambda return (id(off_delay).state *1000);
    lambda: |-
      return (id(target1_distance).state != 0
        || id(target2_distance).state != 0
        || id(target3_distance).state != 0);
  - platform: template
    name: "Zone 1 Occupancy"
    id: zone1_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_1_off_delay).state *1000);
  - platform: template
    name: "Zone 2 Occupancy"
    id: zone2_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_2_off_delay).state *1000);
  - platform: template
    name: "Zone 3 Occupancy"
    id: zone3_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_3_off_delay).state *1000);
  - platform: template
    name: "Zone 4 Occupancy"
    id: zone4_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_4_off_delay).state *1000);
    disabled_by_default: true
  - platform: template
    name: "Target 1 Active"
    id: target1_active
    lambda: |-
      return id(target1_distance).state != 0;
  - platform: template
    name: "Target 2 Active"
    id: target2_active
    lambda: |-
      return id(target2_distance).state != 0;
  - platform: template
    name: "Target 3 Active"
    id: target3_active
    lambda: |-
      return id(target3_distance).state != 0;


number:
  - platform: template
    name: "Occupancy Off Delay"
    id: off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
  - platform: template
    name: "Max Distance"
    id: maxx_distance
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600

  - platform: template
    name: "Zone 1 Begin X"
    id: zone1_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: -4000
  - platform: template
    name: "Zone 1 End X"
    id: zone1_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 4000
  - platform: template
    name: "Zone 1 Begin Y"
    id: zone1_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "Zone 1 End Y"
    id: zone1_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 6000
  - platform: template
    name: "Zone 1 Occupancy Off Delay"
    id: zone_1_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15

  - platform: template
    name: "Zone 2 Begin X"
    id: zone2_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 2 End X"
    id: zone2_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 2 Begin Y"
    id: zone2_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 2 End Y"
    id: zone2_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 2 Occupancy Off Delay"
    id: zone_2_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15

  - platform: template
    name: "Zone 3 Begin X"
    id: zone3_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 3 End X"
    id: zone3_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 3 Begin Y"
    id: zone3_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 3 End Y"
    id: zone3_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "Zone 3 Occupancy Off Delay"
    id: zone_3_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
  - platform: template
    name: "Zone 4 Begin X"
    id: zone4_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "Zone 4 End X"
    id: zone4_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "Zone 4 Begin Y"
    id: zone4_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "Zone 4 End Y"
    id: zone4_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "Zone 4 Occupancy Off Delay"
    id: zone_4_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
    disabled_by_default: true
    
text_sensor:
  # WiFi info
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP address"
      icon: "mdi:network-outline"
      entity_category: "diagnostic"
    ssid:
      id: connected_ssid
      name: "Connected SSID"
      entity_category: "diagnostic"
    bssid:
      id: connected_bssid
      name: "Connected BSSID"
      entity_category: "diagnostic"
    mac_address:
      id: mac_address
      name: "MAC Address"
      entity_category: "diagnostic"
  # ESPHome information
  - platform: version
    id: text_sensor_version
    name: "ESPHome Version"
    entity_category: "diagnostic"
  # UltimateSensor Mini Information
  - platform: template
    id: text_sensor_ultimatesensor_mini_software_version
    name: "Software Version"
    update_interval: 5h
    lambda: |-
      return {"${project_version}"};
    entity_category: "diagnostic"
  - platform: template
    id: text_sensor_ultimatesensor_mini_hardware_version
    name: "Hardware Version"
    update_interval: 5h
    lambda: |-
      return {"${ultimatesensor_mini_hardware_version}"};
    entity_category: "diagnostic" 

dashboard_import:
  package_import_url: github://smarthomeshop/ultimatesensor-mini/ultimatesensor-mini-v1/ultimatesensor-mini-complete.yaml@main
  import_full_config: false

# External components voor SPS30 idle mode functionaliteit (PR #6828)
external_components:
  - source: github://c0mputerguru/esphome@dev
    components: [ sps30 ]
    refresh: 1d
