name: Build and Publish ESPHome firmware

on:
  workflow_call:
    inputs:
      files:
        description: Comma-separated list of files to build.
        required: true
        type: string
      name:
        description: Name of the firmware to publish.
        required: false
        type: string
        default: UltimateSensor Mini
      clean:
        description: Remove deleted files from the build
        required: false
        type: boolean
        default: true
      manifest_filename:
        description: Filename of the manifest to write.
        required: false
        type: string
        default: manifest.json
      esphome_version:
        description: Version of ESPHome to build for.
        required: false
        type: string
        default: latest
      directory_name:
        description: Name of the output folder
        required: true
        type: string
        default: esp32

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
    steps:
      - id: files-array
        shell: bash
        run: |
          files=$(echo "${{ inputs.files }}" | jq -Rcn 'inputs | . / ","')
          echo "files=$files" >> $GITHUB_OUTPUT

  build:
    name: Build ESPHome binary for ${{ matrix.file }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    outputs:
      esphome-version: ${{ steps.esphome-build.outputs.esphome-version }}
      esphome-build-name: ${{ steps.esphome-build.outputs.name }}
      project-version: ${{ steps.esphome-build.outputs.project-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Compute version and inject into YAML
        shell: bash
        run: |
          # Determine VERSION from tag or fallback to dev-<sha>
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            SHORTSHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
            VERSION="dev-${SHORTSHA}"
          fi
          echo "Using VERSION=$VERSION"
          # Extract main version and create full version with build number
          MAIN_VERSION=$(grep "project_main_version:" ultimatesensor-mini-v1/ultimatesensor-mini-common.yaml | sed 's/.*: *"\([^"]*\)".*/\1/')
          FULL_VERSION="${MAIN_VERSION}.${{ github.run_number }}"
          echo "Using FULL_VERSION=$FULL_VERSION"
          # Update project_version in common.yaml
          sed -i "s/^\s*project_version: \".*\"/  project_version: \"${FULL_VERSION}\"/" ultimatesensor-mini-v1/ultimatesensor-mini-common.yaml
      - name: Create dummy secrets for build
        shell: bash
        run: |
          DIR=$(dirname "${{ matrix.file }}")
          mkdir -p "$DIR"
          printf 'wifi_ssid: "DUMMY"\nwifi_password: "DUMMYPASS"\n' > "$DIR/secrets.yaml"
      - uses: esphome/build-action@v6
        id: esphome-build
        with:
          yaml-file: ${{ matrix.file }}
          version: ${{ inputs.esphome_version }}
      - name: Collect outputs
        run: |
          mkdir output
          mv "${{ steps.esphome-build.outputs.name }}" temp
          mv temp "${{ inputs.directory_name }}"
          mv "${{ inputs.directory_name }}" output/
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}
          path: output

  publish:
    if: (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref == 'refs/heads/main'
    name: Publish new firmware and website to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: output
          name: ${{ inputs.name }}

      - name: Create single manifest.json
        shell: bash
        run: |
          jq -s '{"name": "${{ inputs.name }}", "version": "${{ needs.build.outputs.project-version }}", "home_assistant_domain": "esphome", "new_install_skip_erase": false, "builds":.}' output/*/manifest.json \
            > output/${{ inputs.manifest_filename }}

          jq --arg dir "${{ inputs.directory_name }}" '
            .builds[].ota.path |= "\($dir)/\(.)" |
            .builds[].parts[].path |= "\($dir)/\(.)"
          ' \
            output/${{ inputs.manifest_filename }} \
            > output/manifest_temp.json

          mv output/manifest_temp.json output/${{ inputs.manifest_filename }}
          
      - name: Deploy firmware
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: output
          clean: ${{ inputs.clean }}
          force: false
          attempt-limit: 6


